{"version":3,"sources":["components/loader/loader.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Loader","inline","useEffect","document","getElementById","classList","add","className","id","class","Login","lazy","Register","Navbar","Homepage","Boards","Users","Pastew","NoMatch","location","useLocation","pathname","App","useState","name","sessionStorage","getItem","email","_id","token","user","setLoginUser","fallback","exact","path","to","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.bbb5f1f6.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./loader.scss\";\n\nfunction Loader({ inline }) {\n  useEffect(() => {\n    if (inline) document.getElementById(\"loader\").classList.add(\"inline\");\n  }, [inline]);\n\n  return (\n    <div className=\"loader\" id=\"loader\">\n      <div class=\"lds-ripple\">\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n}\n\nexport default Loader;\n","import { React, useState, Suspense, lazy } from \"react\";\nimport \"./App.scss\";\nimport {\n  // BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n  useLocation,\n  HashRouter,\n} from \"react-router-dom\";\nimport Loader from \"./components/loader/loader\";\n\nconst Login = lazy(() => import(\"./pages/userStaging/login\"));\nconst Register = lazy(() => import(\"./pages/userStaging/register\"));\nconst Navbar = lazy(() => import(\"./components/navbar/navbar\"));\nconst Homepage = lazy(() => import(\"./pages/home/homepage\"));\nconst Boards = lazy(() => import(\"./pages/boards/boards\"));\nconst Users = lazy(() => import(\"./pages/users/users\"));\nconst Pastew = lazy(() => import(\"./pages/pastew/pastew\"));\n\nfunction App() {\n  const [user, setLoginUser] = useState({\n    name: sessionStorage.getItem(\"name\"),\n    email: sessionStorage.getItem(\"email\"),\n    _id: sessionStorage.getItem(\"id\"),\n    token: sessionStorage.getItem(\"token\"),\n  });\n\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <div>\n          <Suspense fallback={<Loader />}>\n            <Switch>\n              <Route exact path=\"/login\">\n                <Login setLoginUser={setLoginUser} />\n              </Route>\n\n              <Route exact path=\"/register\">\n                <Register />\n              </Route>\n\n              <Route exact path=\"/pastew/:id\">\n                <Pastew user={user} />\n              </Route>\n\n              <>\n                <Navbar user={user} setLoginUser={setLoginUser} />\n\n                <Suspense fallback={<div>Loading...</div>}>\n                  <Switch>\n                    {user.name && user._id && user.token ? null : (\n                      <Redirect to=\"/login\" />\n                    )}\n\n                    <Route exact path=\"/\">\n                      <Homepage />\n                    </Route>\n\n                    <Route exact path=\"/users\">\n                      <Users />\n                    </Route>\n\n                    <Route exact path=\"/boards\">\n                      <Boards user={user} />\n                    </Route>\n\n                    <Route exact path=\"/pastew\">\n                      <Pastew user={user} />\n                    </Route>\n\n                    <Route path=\"*\">\n                      <NoMatch />\n                    </Route>\n                  </Switch>\n                </Suspense>\n              </>\n            </Switch>\n          </Suspense>\n        </div>\n      </HashRouter>\n    </div>\n  );\n}\n\nfunction NoMatch() {\n  let location = useLocation();\n\n  return (\n    <div>\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <h3>\n        No match for <code>{location.pathname}</code>\n        <br />\n        404 page here\n      </h3>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}